# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main", "dev" ]
    
env:
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: fairy-teller_be
  BUCKET_NAME: fairyteller-dev-deploy
  CODE_DEPLOY_APP_NAME: fairyteller_dev
  DEPLOYMENT_GROUP_NAME: fairyteller-dev-be

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 11 셋팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # (3) application.properties 수정
    - name: Modify application.properties
      run: |
        sed -i "s|spring.profiles.active=local|spring.profiles.active=dev|" ./src/main/resources/application.properties
        sed -i "s|#spring.profiles.include=|spring.profiles.include=file, oauth, tts, chatgpt, papago, image|" ./src/main/resources/application.properties

    # (4) application-chatgpt.properties 수정
    - name: Modify application-chatgpt.properties
      run: |
        sed -i "s|#chatgpt.api-key=|chatgpt.api-key=${{ secrets.CHATGPT_API_KEY }}|" ./src/main/resources/application-chatgpt.properties
        
    # (5) application-file.properties 수정
    - name: Modify application-file.properties
      run: |
        sed -i "s|#cloud.aws.credentials.accessKey=|cloud.aws.credentials.accessKey=${{ secrets.AWS_S3_ACCESS_KEY }}|" ./src/main/resources/application-file.properties
        sed -i "s|#cloud.aws.credentials.secretKey=|cloud.aws.credentials.secretKey=${{ secrets.AWS_S3_SECRET_KEY }}|" ./src/main/resources/application-file.properties
    
    # (6) application-oauth.properties 수정
    - name: Modify application-oauth.properties
      run: |
        sed -i "s|#spring.security.oauth2.client.registration.kakao.client-id=|spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}|" ./src/main/resources/application-oauth.properties
        
        sed -i "s|#spring.security.oauth2.client.registration.naver.client-id=|spring.security.oauth2.client.registration.naver.client-id=${{ secrets.NAVER_CLIENT_ID }}|" ./src/main/resources/application-oauth.properties
        sed -i "s|#spring.security.oauth2.client.registration.naver.client-secret=|spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_CLIENT_SECRET }}|" ./src/main/resources/application-oauth.properties
        
        sed -i "s|#spring.security.oauth2.client.registration.google.client-id=|spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }}|" ./src/main/resources/application-oauth.properties
        sed -i "s|#spring.security.oauth2.client.registration.google.client-secret=|spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }}|" ./src/main/resources/application-oauth.properties
    
    # (7) application-papago.properties 수정
    - name: Modify application-papago.properties
      run: |
        sed -i "s|#papago.client-id=|papago.client-id=${{ secrets.PAPAGO_API_KEY }}|" ./src/main/resources/application-papago.properties
        sed -i "s|#papago.client-secret-key=|papago.client-secret-key=${{ secrets.PAPAGO_SECRET_KEY }}|" ./src/main/resources/application-papago.properties
    
    # (8) Gradle Build (test 제외)
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
#       uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#       with:
#         arguments: build
      run: ./gradlew clean build --exclude-task test
    
    # (9) 압축 파일 형태로 전달
    - name: Make Zip File
      run: zip -qq -r ./$GITHUB_SHA.zip .
      shell: bash
      
    # (10) AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    # (11) S3 bucket으로 copy
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
    
    # (12) EC2 배포
    - name: Code Deploy To EC2 instance
      run: aws deploy create-deployment 
                --application-name ${{env.CODE_DEPLOY_APP_NAME}} 
                --deployment-config-name CodeDeployDefault.AllAtOnce 
                --deployment-group-name ${{env.DEPLOYMENT_GROUP_NAME}}  
                --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
    
    # (13) Slack 알림
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        fields: deployment-status,commit,author,repository,event-name
        deployment: ${{ env.DEPLOYMENT_GROUP_NAME }}
        environment: ${{ env.PROJECT_NAME }}
        message: "Deployment completed successfully."
